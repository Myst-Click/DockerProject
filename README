							Version 0.1 07/02/2020

Introduction Project : 

DockerProject est un projet ayant comme objectif d'instrualiser une application.
Trois taches principales sont à effectuer:
	- Utilisation d'un workflow GIT
	- Présence d'une application fonctionnelle
	- Utilisation de Docker comme systeme de conteneurisation

Versioning : 
	Workflow GIT défini : Git-Flow
		1 branche "master" contient les versions stables du projet
		1 branche "developp" contient le développement du projet. On y prépare les changement en vue de la prochaine release dans "master"
		
		Des branches secondaires "feature" contenant chaque fonctionnalité.

	Durant notre projet, nous n'avons pas utilisé le Workflow à 100%. Nous avons attendu que l'api et la base de donnée soit réalisée pour ensuite 
	faire la partie Java. Seule une personne s'occupait de l'api + bdd. Nous avons donc conclus qu'il n'etait pas nécessaire de créer des branches intermédiaires
	avant de merge sur developp. Sachant que nous n'avons pas travailler en parallèle, notre branche de dev fut donc developp.

Type d'application : TODO-List

Docker : 

	Utilisation de Dockerfile pour creer l'image de notre API en node JS
	Utilisation de docker-compose pour linker le container mongo et le container api

Autres :

	- Utilisation des conventions de codage Karma-Runner.
	(http://karma-runner.github.io/4.0/dev/git-commit-msg.html)
	
Contribuer : 

	- se positionner à la racine (ou se trouve le ficher docker-compose.yml)
	- entrer la commande "docker pull mongo" si vous ne possédez pas l'image mongo
	- entrer la commande "docker pull node:7" si vous ne possédez pas l'image node
	- entrer la commande "docker-compose build"
	- entrer la commande "docker-compose up"
	
	(ne pas oublier d'installer les packages à l'aide de "npm install")

Fonctionnalités de l’application:

	- possibilité de creer une nouvelle tache
	- possibilité de lister les taches actuel
